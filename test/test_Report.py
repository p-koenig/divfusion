import re

import plotly.express as px
import pytest
from pyfakefs.fake_filesystem_unittest import Patcher

from static_html.Report import Report


@pytest.fixture(params=["MINIMAL_TEST", "PLOTLY_TEST"])
def report_type(request):
    return request.param


@pytest.fixture
def report(report_type):
    """
    Return a Report object.
    :return: A Report object
    """
    title = report_type
    match report_type:
        case "MINIMAL_TEST":
            divs = ["<div>Test Content</div>"]
            report = Report(title, divs)
        case "PLOTLY_TEST":
            divs = [px.scatter(x=[1, 2, 3], y=[1, 2, 3]).to_html(full_html=False,
                                                                 include_plotlyjs=False,
                                                                 div_id="test_px").replace("\n", "")]
            js_libs = ["plotly-2.20.0.min.js"]
            report = Report(title, divs, js_libs=js_libs)
        case _:
            raise ValueError(f"Unknown test case: {report_type}")

    return report


@pytest.fixture
def expected_html(report_type):
    """
    Return the expected HTML for the Report object.
    :return: A string containing the expected HTML
    """
    try:
        with open(f"../resources_test/{report_type}.html") as f:
            return f.read()
    except FileNotFoundError:
        raise ValueError(f"Could not find expected HTML file for test case: {report_type}")


def compare_html(html1, html2):
    """
    Compare two HTML strings.
    :param html1: HTML string 1
    :param html2: HTML string 2
    :return: True if the HTML strings are equal, False otherwise.
    """

    def prep_html(s: str):
        """
        Prepare the HTML for comparison.
        :param s: HTML string
        :return: trimmed
        """
        s = re.sub(r"[^A-Za-z%+\-.,_<>/{}()\"'0-9=#|:;]", "", s)
        return s

    html1 = prep_html(html1)
    html2 = prep_html(html2)

    return html1 == html2


def test_generate_html(report, expected_html):
    # Assert that the HTML generated by the Report matches the expected HTML.
    assert compare_html(report._generate_html(), expected_html)


def test_write(report, expected_html):
    """
    Test the write method of the Report class.
    :param report: pytest.fixture
    :return:
    """
    test_file_path = "test.html"

    # Assert that the contents of the file match the expected HTML.
    with Patcher():
        report.write(test_file_path)
        with open(test_file_path, "r") as f:
            assert compare_html(f.read(), expected_html)
