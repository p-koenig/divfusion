from unittest.mock import patch, mock_open

import pytest

from static_html.Report import Report


@pytest.fixture
def report():
    """
    Return a Report object.
    :return: A Report object
    """
    title = "Test Report"
    divs = [["<div>Test Content</div>"]]
    css_files = ["test.css"]
    js_files = ["test.js"]
    js_libs = ["test_lib.js"]
    return Report(title, divs, css_files, js_files, js_libs)


expected_html = (  # TODO Better way to do this?
    '<html>\n'
    '<head>\n'
    '<title>Test Report</title>\n'
    '<link rel="stylesheet" href="test.css">\n'
    '<script src="test_lib.js"></script>\n'
    '<script src="test.js"></script>\n'
    '</head>\n'
    '<body>\n'
    '<div class="container">\n'
    '<div class="row">\n'
    '<div class="col-md-6">\n'
    '<div>Test Content</div>'
    '</div>\n'
    '</div>\n'
    '</div>\n'
    '</body>\n'
    '</html>\n'
)


def test_generate_html(report):
    # Assert that the HTML generated by the Report matches the expected HTML.
    assert report._generate_html() == expected_html


def test_write(report, tmp_path, monkeypatch):
    """
    Test the write method of the Report class.
    :param report: pytest.fixture
    :param tmp_path: temporary file path from pytest
    :param monkeypatch: monkeypath from pytest
    :return:
    """
    test_file_path = str(tmp_path / "test.html")

    # Assert that the contents of the file match the expected HTML.
    # Create mock open function.
    m = mock_open()
    with patch('builtins.open', m):
        report.write(test_file_path)
        m.assert_called_once_with(test_file_path, 'w+')
        m.return_value.write.assert_called_once_with(expected_html)
